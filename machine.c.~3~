#include "machine.h"

/* takes in the Word instruction and gets the bits at certain positions and 
   assigns them to variables */
int decode_instruction (Word instruction, unsigned short *const opcode, unsigned int *const imm_or_addr, unsigned short *const reg1, unsigned short *const reg2) {
  int i;
  int pos = 0;
  int retval = 0;
  unsigned short opc = 0;
  unsigned int addr = 0;
  unsigned short reg_one = 0;
  unsigned short reg_two = 0;
  opcode = &opc;
  imm_or_addr = &addr;
  reg1 = &reg_one;
  reg2 = &reg_two;
  if (!(opcode == NULL && imm_or_addr == NULL && reg1 == NULL
	&& reg2 == NULL)) {
    retval = 1; /* valid parameters */
    for (i = 31; i > 0; i--) {
      /* shifts all variables to the left one so that they have an extra 0
	 to use for the or operator */
      opc <<= 1;
      addr <<= 1;
      reg_one <<= 1;
      reg_two <<= 1;
      /* gets the first 5 bits by shifting to the right i times until i is 
	 >=5 and anding with 1 each time to extract the rightmost value */
      while (pos < 5){
	opc |= (instruction >> i) & 1;
	pos++;
      }
      /* gets the next 17 bits that represent the memory address and stores
	 in addr (using same logic from above to extract values) */
      while (pos < 22) {
	addr |= (instruction >> i) & 1;
	pos++;
      }
      /* gets the next 5 bits that represent reg1 and stores in 
	 reg_one (using same logic from above to extract values) */
      while (pos < 27) {
	reg_one |= (instruction >> i) & 1;
	pos++;
      }
      /* gets the next 5 bits that represent reg2 and stores in 
	 reg_two (using same logic from above to extract values) */
      while (pos < 32) {
	reg_two |= (instruction >> i) & 1;
      }
    }
    return retval;
  }
	
	
